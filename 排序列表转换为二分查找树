/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param head: The first node of linked list.
     * @return: a tree node
     */
    public TreeNode docreate(ListNode head){
        
        ListNode temp=new ListNode(-1);
        temp.next=head;
        ListNode end=temp;
        ListNode mid=temp;
        ListNode pre=temp;
        int k=1;
        while(end!=null&&end.next!=null)
        {
            
            mid=mid.next;
            if(end.next.next==null)
            end=end.next;
            else end=end.next.next;
            if(k<=0)pre=pre.next;
            k--;
        }
       
        if(end.val==head.val&&head.next==null)
        {
             //System.out.println(head.val);
             TreeNode root=new TreeNode(head.val);
             
             return root;
            
        }
        if(head.next.val==end.val&&head.next.next==null)
        {
            TreeNode root=new TreeNode(mid.val);
            root.right=new TreeNode(end.val);
            root.left=null;
            return root;
        }
       
       
        TreeNode root=new TreeNode(mid.val);
        root.right=docreate(mid.next);
        pre.next=null;
        root.left=docreate(temp.next);
        return root;
    }
    public TreeNode sortedListToBST(ListNode head) {
        // write your code here
        if(head==null)return null;
        TreeNode ans=docreate(head);
        return ans;
    }
}
