/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param root: A Tree
     * @return: Level order a list of lists of integer
     */ 
    public List<List<Integer>> levelOrder(TreeNode root) {
        // write your code here
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        if(root==null)return ans;
        Queue<TreeNode>queue=new LinkedList<TreeNode>();
        ArrayList<Integer> temp=new ArrayList<Integer>();
        queue.offer(root);
        
        TreeNode first=null;
        TreeNode rear=root;
        TreeNode node=null;
        while(!queue.isEmpty())
        {
            first=queue.poll();
            temp.add(first.val);
            if(first.left!=null)
            {
                 queue.offer(first.left);
                 node=first.left;
            }
               
                
            if(first.right!=null)
            {
                queue.offer(first.right);
                node=first.right;
            }
                
            
            
            if(first==rear)
            {
               
               ArrayList<Integer> te=(ArrayList<Integer>) temp.clone();//
                ans.add(te);//不能直接add（temp）,这里添加的是temp的引用！！！！！！
                temp.clear();
                rear=node;
            }
        
        }
        
        return ans;
        
    }
}
