/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;      
 *     }
 * }
 */


public class Solution {
    /*
     * @param l1: The first list.
     * @param l2: The second list.
     * @return: the sum list of l1 and l2.
     */
     public ListNode fz(ListNode l){//翻转链表顺序，使低位在头节点处
         ListNode head=new ListNode(0);
         while(l!=null){
             ListNode temp=new ListNode(l.val);
              temp.next=head.next;
            head.next=temp;
             l=l.next;
         }
         return head;
     }
    
    public ListNode addLists2(ListNode l1, ListNode l2) {
        // write your code here
        ListNode ans=new ListNode(0);
       
        if(l1!=null&&l2!=null){
        ListNode a=fz(l1);
        ListNode b=fz(l2);
        
        int jin=0;//记录进位
         a=a.next;
            b=b.next;
           // System.out.println(a.val);
           // System.out.println(b.val);
        while(a!=null&&b!=null){
            int jie=a.val+b.val+jin;//记得把进位加上
            if(jie>=10){//判断是否有进位
                jie-=10;
                jin=1;//
            }else jin=0;
            ListNode temp=new ListNode(jie);
            temp.next=ans.next;
            ans.next=temp;
            a=a.next;
            b=b.next;
        }
        while(a!=null){//链表a不空，将剩余部分累加
            int jie=a.val+jin;
            if(jie>=10){//判断是否有进位
                jie-=10;
                jin=1;
            }else jin=0;
            ListNode temp=new ListNode(jie);
            temp.next=ans.next;
            ans.next=temp;
             a=a.next;
        }
        while(b!=null){
            int jie=b.val+jin;
            if(jie>=10){//判断是否有进位
                jie-=10;
                jin=1;
            }else jin=0;
            ListNode temp=new ListNode(jie);
            temp.next=ans.next;
            ans.next=temp;
            b=b.next;
        }
        if(jin!=0){
              ListNode temp=new ListNode(1);
            temp.next=ans.next;
            ans.next=temp;
        }
        }
       
        return ans.next;
    }
    
};
